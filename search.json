[
  {
    "objectID": "card.html",
    "href": "card.html",
    "title": "card – A basic playing card",
    "section": "",
    "text": "We will be using numbers to represent playing card suits and ranks. These are the suits:\nFor instance the suit at index 0:\nThese are the ranks:\nFor instance the rank at index 1 (note that there isn’t a playing card at position 0, since we want the ranks to match the indicies where possible)"
  },
  {
    "objectID": "card.html#comparison-operators",
    "href": "card.html#comparison-operators",
    "title": "card – A basic playing card",
    "section": "Comparison operators",
    "text": "Comparison operators\nEquality, less than, and greater than work on the rank and suit indicies:\nFor instance, here’s a test for equality..\n\ntest_eq(Card(suit=1, rank=3), Card(suit=1, rank=3))\n\n…and a test of <…\n\nassert Card(suit=1, rank=3) < Card(suit=2, rank=3)\n\n\nassert Card(suit=3, rank=3) > Card(suit=2, rank=2)\nassert not Card(suit=1, rank=3)>Card(suit=2, rank=3)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbdev_testing",
    "section": "",
    "text": "A deck of cards demo of nbdev based on ideas from Think Python 2e book."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "nbdev_testing",
    "section": "Install",
    "text": "Install\nInstall using:\npip install nbdev-testing\nor:\nconda install -c fastai nbdev-testing"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "nbdev_testing",
    "section": "How to use",
    "text": "How to use\nThis lib provides a Card class which you can use to create, display, and compare playing cards:\n\nCard(1, 3)\n\n3♥\n\n\nSuits are numbered according to this list:\n\nsuits\n\n['♠', '♥', '♦', '♣']"
  },
  {
    "objectID": "deck.html",
    "href": "deck.html",
    "title": "deck",
    "section": "",
    "text": "Deck\n\n Deck ()\n\nInitialize self. See help(type(self)) for accurate signature.\nWhen we initially create a deck, all of the cards will be present.\n\ndeck = Deck()\ndeck\n\nA♠; 2♠; 3♠; 4♠; 5♠; 6♠; 7♠; 8♠; 9♠; 10♠; J♠; Q♠; K♠; A♥; 2♥; 3♥; 4♥; 5♥; 6♥; 7♥; 8♥; 9♥; 10♥; J♥; Q♥; K♥; A♦; 2♦; 3♦; 4♦; 5♦; 6♦; 7♦; 8♦; 9♦; 10♦; J♦; Q♦; K♦; A♣; 2♣; 3♣; 4♣; 5♣; 6♣; 7♣; 8♣; 9♣; 10♣; J♣; Q♣; K♣\n\n\nThat should be 52 cards\n\ntest_eq(len(deck), 52)\n\nAs a reminder, these are the suits we defined for a Card\n\nsuits\n\n['♠', '♥', '♦', '♣']\n\n\n\nCard(1, 1) in deck\n\nTrue\n\n\n\n\nDeck.remove\n\n Deck.remove (card:nbdevtesting.card.Card)\n\nRemoves card from the deck or raises an exception if it is not there\n\n\n\nDeck.pop\n\n Deck.pop (idx:int=-1)\n\nRemove one card from the deck\n\ndeck = Deck()\ntest_eq(deck.pop(), Card(3, 13)) # K spades\n\nThere are 51 cards left in the deck now\n\ntest_eq(len(deck), 51)\n\n\ncard23 = Card(2, 3)\ndeck.remove(card23)\n\nassert card23 not in deck\n\nValueError: list.remove(x): x not in list"
  }
]